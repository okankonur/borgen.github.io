[{"content":"Too Long, Didn\u0026rsquo;t Read: I use a simple app to connect to my home network from anywhere in the world.\nAs you buy little gadgets that connect to internet, you begin to realize the need, the need for spee\u0026hellip; ehm, no, the need for connecting to your home network. Nowadays your gadget also comes with its software which enables you to control it from a mobile app or their website or something so you don\u0026rsquo;t worry about anything. But how does that work? How can you see what your device is doing at home? Isn\u0026rsquo;t it supposed to be a isolated network with firewalls to prevent strangers from accessing it?\nIt is. Usually there is no way for anyone to send a request to your external IP and get a response. All the inbound ports of your home network is closed as default. Your router\u0026rsquo;s default firewall should prevent this. No stranger can start a communication. However they can respond to a communication which is started by you. If the firewall hadn\u0026rsquo;t been allowing these responses, you wouldn\u0026rsquo;t have been reading this.\nEquipment used by E.T. to call home\nThat\u0026rsquo;s why in the olden days, you needed to forward a port (meaning, to open it to external world). You see why this is insecure. Anyone that know or stumble upon your public IP can scan and send requests to your open port. If you run anything vulnerable behind that port, you are in trouble.\nWhat to do? You can use a VPN service. You may have heard of Hamachi. Many years ago (before the age of Steam) we were using it to play multiplayer games without port forwarding. It was easy to use and it simulated a LAN. So we just started it up, connected to it and shared our local server. At that time it felt like magic.\nGreat software built alike I, like everyone else, love a software that:\nhas one basic job does it perfectly (fast, no need for extensive configuration) intuitive (no need for devops skills) lightweight no shady ads Last year I felt this elusive feeling of magic again. It was Tailscale. Built on open source VPN backbone Wireguard, it was simple to set up. Worked out of the box on all of my devices, including a raspberry pi, a Windows PC and iOS.\nWhat is it for? It lets you create your own VPN. Most useful thing about this is, you can connect devices to this VPN and just do what you gotta do like you never left home. Nobody can interfere with your IP packets because they are end-to-end encrypted in every step of the journey peer-to-peer.\nThe warm feeling of \u0026ldquo;open-source\u0026rdquo; You may be asking \u0026ldquo;so you are going to just trust this?\u0026rdquo; I may be answering, you gotta trust something in the end. Or you can investigate the open source repo of wireguard and key generation steps of tailscale. I didn\u0026rsquo;t. That\u0026rsquo;s how much I trust \u0026ldquo;open-source\u0026rdquo; buzzword. Heh, heh\u0026hellip;\nSmart home apps? Do you really need this? If you have those apps I mentioned, the ones that come with the product you bought, you don\u0026rsquo;t really need to set up something to connect home. They act as a control center between the actual home device and your client (mobile phone or pc). Both of these devices send requests to the centralized control center server and it relays the information. I don\u0026rsquo;t think these services focus on the encryption side of things. Sure, the traffic may flow through SSL, however, some company personnel can configure your account so that next time your home device polls for some command to execute, it will execute a command you did not put there. There is no guarantee if there is no end-to-end encryption between you and the target device at home.\nOn the other hand, if you are self hosting some projects from your home, that means you don\u0026rsquo;t have any commercial middleware apps or servers for your custom projects. So you need to connect directly.\nOK but how does Tailscale differ? Tailscale also have a control center layer that they call \u0026ldquo;control plane\u0026rdquo;. This greatly simplifies things in terms of key exchange. The difference from commercial apps is, traffic is encrypted and it is not routed over their servers (if you have a UDP port open and allow direct connection), you connect directly to your target. But it also works without port forwarding, thanks to Tailscale\u0026rsquo;s NAT traversal. Even if you have dynamic IP and no open ports.\nIn summary, you have two options regarding port forwarding with tailscale:\nForward an UDP port to directly (real-undiluted p2p) connect to your home. Difference from forwarding your 443 port and connecting via TLS is, you don\u0026rsquo;t need to boot up a TLS compatible web application server behind your port. The traffic will be encrypted over Wireguard. Leave your firewall as is. Trust the relay servers of tailscale. I do this. I trust the relay server because Man in the Middle attacks are prevented via Wireguard by default. And I don\u0026rsquo;t see any noticable performance bottleneck. Wireguard works with asymmetric encryption. It must have private-public key pairs for each device on the network. The public keys must be known for each device. Devices create the private one locally without telling anyone. But the corresponding public key is sent to the server where it is listed for anyone else on the same account\u0026rsquo;s network ip list to see.\nTailscale assigns internal IPs for each device. If your local tailscale app is active, you can connect to these ip addresses and the traffic will be end-to-end encrypted. If any of these devices allows access to their UDP ports, connection will be peer-to-peer. If not, tailscale will use their relay servers.\nTailscale Internal IP List\nAll in all, I am very satisfied with this setup and wanted to give my thanks to Tailscale by writing about it.\n","permalink":"http://localhost:1313/posts/callhome/","summary":"\u003cp\u003e\u003cem\u003e\u003cstrong\u003eToo Long, Didn\u0026rsquo;t Read:\u003c/strong\u003e\u003c/em\u003e I use a simple app to connect to my home network from anywhere in the world.\u003c/p\u003e\n\u003cp\u003eAs you buy little gadgets that connect to internet, you begin to realize the need, the need for \u003cem\u003espee\u0026hellip;\u003c/em\u003e ehm, no, the need for connecting to your home network. Nowadays your gadget also comes with its software which enables you to control it from a mobile app or their website or something so you don\u0026rsquo;t worry about anything. But how does that work? How can you see what your device is doing at home? Isn\u0026rsquo;t it supposed to be a isolated network with firewalls to prevent strangers from accessing it?\u003c/p\u003e","title":"Calling Home"},{"content":"Table of Contents Table of Contents Why How Booting Up Raspberry PI We need to CONTAIN them! Projects to Host Docker Management Interface Keeping Your System Up To Date Manage Your Passwords Block Ads Even Before They Reach Your Home Network Your Own Projects What Now? Why So, why would you ever need to host anything at home? We live in the age of cloud computing. You can sign up with any mainstream provider and have all the functionality of the services we are going to talk about, without all the configuration hassle.\nThere are three main reasons for me. First and foremost, it is fun. Configuring and setting up a home server that works fluidly without needing much maintanence is satisfying. If this sounds ridiculous to you, other reasons aren\u0026rsquo;t important. It comes down to personal preference. Cloud is OK.\nThis brings us to the second reason. Where cloud may not be OK.\nPrivacy. We all know that our data is already spilled out there. No matter how much you try, if you are benefiting from FAANG services, they own and sell your data. It may be an acceptable trade in exchange of the services they provide. I am OK with that. However, if you are not, self hosting is also for you.\nThirdly, there are some projects that help you administer your internal home network. For example you can set up an intermediary DNS and block ads on all of the devices connected to your WiFi without any browser extension or adblock installment. You can\u0026rsquo;t easily do this with any of the cloud services.\nHow First thing to get is an old pc which is lying around. Or better, a raspberry pi\u0026hellip; or better, a rpi cluster!\nRaspberry PI is the most efficient way to go in my opinion. It is:\ncheap tiny (you can stick it to your wall) low power usage (consumes 1W on average - I have model 3b) has everything you need to get started Power Usage With 6 Containers Running\nBooting Up Raspberry PI First, flash an OS. Easiest and most compatible is the Raspberry Pi OS. I recommend 64-bit version because some docker images are only compatible with it. Find the list here I have the desktop version but you don\u0026rsquo;t necessarily need it. Download and follow the instructions on the Raspberry Pi Imager. SSH and WiFi configuration step is important in the imager. We will connect with SSH. Connect to your server. If you flashed and set up wifi and ssh properties successfully, you can now connect to you pi from any other pc on your home network. Find your pi\u0026rsquo;s assigned IP. You can get this info from your router\u0026rsquo;s interface. (e.g: 192.168.1.1 or something like that) open up your terminal and connect through ssh: ssh pi@\u0026lt;pi ip\u0026gt;. For example: ssh pi@192.168.1.105 Recommended if you are using Windows on PC: Install WinSCP for transferring files to your pi. It will come in handy. We need to CONTAIN them! If you are hosting more than one project with different infrastructures, docker saves the day. Best thing about these open source project developers are that they also release their docker images. You don\u0026rsquo;t even need to build the image nowadays. Just downloading from the hub and slapping some parameters makes it ready to go.\n$ sudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade\n$ curl -fsSL https://get.docker.com -o get-docker.sh\n$ sudo sh get-docker.sh\nNow we are ready to download and run some projects which are built for self-hosting!\nNote: If you are using a pi with 64 bit os, choose linux-arm64 among the container image versions.\nMy current running project list is:\nPortainer: Manage your docker ecosystem with a web interface. This is a must imho. Watchtower: Automatically update your docker images to the latest version from the hub. Bitwarden: Best password manager out there. Pihole: DNS Ad-Blocker for your home network. My Side Projects: Custom Discord bot. Simple ethereum low gas price e-mail notifier. Let\u0026rsquo;s look into how we can set up most of them.\nProjects to Host There are a myriad of open source projects to host on your home server. However, if you are using a pi, the resource intensive ones might be too much for it to handle. To give you an idea, I\u0026rsquo;ve tried to host Firefly III which is a self budgeting and expense tracker tool and it uses MySQL DB. It gobbled up my poor little pi\u0026rsquo;s resources to the point that other containers suffered and froze. On the other hand, projects that use more lightweight modules tend to be more easy to maintain. Like Vaultwarden with SQLite.\nDocker Management Interface This one is for ease of use. Portainer works well. It provides an user interface where you can see details about running containers, images etc. You can start/stop/kill/remove them, organize and manage them. You can do these from the terminal but this is more convenient in my opinion.\n$ docker run -d --name=portainer --restart unless-stopped -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:linux-arm64\nI will typically use --restart unless-stopped for most of my containers. I don\u0026rsquo;t want to manually start them if the server reboots or loses power for some reason.\nPortainer Dashboard\nPortainer Details\nKeeping Your System Up To Date If you are using cloud services, one thing you don\u0026rsquo;t need to worry about is that the application\u0026rsquo;s maintanence. The risk of vulnerability is provider\u0026rsquo;s responsibilty. If you decide to host your own, you need to keep an eye on the version of your apps. Consider a zero-day exploit has been discovered for a library which one of your apps use. The maintainers of the repo quickly and heroically releases a new version. This is nice, except how would you know about these events if you are not constantly skimming the news for your favorite projects. This is not maintanable. We need to find a way to automatically update our container images if there is a new version out there in the hub.\nWatchtower comes to the rescue. I love this project. It periodically checks if there is a newer version the docker hub and downloads and spins up a new instance for you. Then if you want, it emails you what it had done. I omitted the email parameters here, you can check the docs.\n$ docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower:arm64v8-latest\nNote: If you have critical apps and want to opt-out from watchtower updates to avoid failures, you can put an extra parameter to your target docker run script like this: --label=com.centurylinklabs.watchtower.enable=false\nManage Your Passwords Until the global password problem is solved with some asymmetric cryptography, you are stuck with your 800 different (I hope!) passwords on every different platform. Best password manager I have used is Bitwarden. More specifically its lightweight open source version Vaultwarden. You can also use Bitwarden freely on the cloud. This is also great on Bitwarden\u0026rsquo;s part and I appreciate the business decision to do it this way. But for our purposes, we will stick with the self-host option.\nI like that:\nIt has nice and easy to use interface. Has browser extension and mobile app (that will connect to your home instance). It is open source. It is actively developed. Works perfect on docker on pi. It is easy to backup. (just back up the sqlite.db file) Mmmhh\u0026hellip; that password generator\u0026hellip;\nFirst things first, you can\u0026rsquo;t set this one up from scratch with just one docker command. It MUST have an SSL certificate to work properly. So you have 2 options:\nCreate a self-signed certificate. Use this if you don\u0026rsquo;t have a domain that will answer the DNS query to get a free certificate from Let\u0026rsquo;s Encrypt. Create the root CA and sign a certificate with it. You can use OpenSSL. You need to add this root CA to your trusted roots on your client. You see that it starts to get cumbersome if you plan to access from different devices. Good news is that you won\u0026rsquo;t need to renew the certificate so soon because you choose the dates! Get an SSL certificate for a subdomain that you own. In my case, I own okankonur.com. So if I get a wildcard SSL certificate for my domain and just add a DNS record that resolves some subdomain like bitwarden.okankonur.com to my home network IP, I am all set. This DNS record will be public, so I can access this from any device. No need to add it manually. Only thing is, I must renew my certificate every 3 months from Let\u0026rsquo;s Encrypt. Assuming you are done with the certificate business and you have your certificate\u0026rsquo;s public and private key files on your pi.\nRenewing the certificate:\n$ certbot certonly --manual -d *.okankonur.com\nCopy the resulting pem files to target folders, for example /ssl:\n$ cp /etc/letsencrypt/live/okankonur.com/fullchain.pem /etc/ssl/certs/fullchain-okankonur.pem\n$ cp /etc/letsencrypt/live/okankonur.com/privkey.pem /etc/ssl/certs/privkey-okankonur.pem\nWe are ready to start up our Vaultwarden instance with our SSL certificate info.\ndocker run -d --name vaultwarden --restart unless-stopped -v /bw-data:/data -v /etc/ssl/certs:/ssl -e ROCKET_TLS='{certs=\u0026quot;/ssl/fullchain-okankonur.pem\u0026quot;,key=\u0026quot;/ssl/privkey-okankonur.pem\u0026quot;}' -p 443:443 -e ROCKET_PORT=443 vaultwarden/server:latest\nYou can now go to your instance through your subdomain URL and create an account to get started.\nIf you have other passwords exported in a format like .csv or json you can import them to Bitwarden.\nBlock Ads Even Before They Reach Your Home Network Meaning: blacklist the advertisement URLs with your custom internal DNS. How? Pi-hole.\nDefault one-line install: $ curl -sSL https://install.pi-hole.net | bash\nThen you need to go to your WiFi Router\u0026rsquo;s interface and add a custom DNS IP, which will correspond to your pi which runs the pi-hole. You can find detailed tutorial online. Pi-hole Dashboard\nYour Own Projects Dockerization and deployment of a minimum-dependency and lightweight apps have become very easy. For example you can dockerize your Java Maven Application with Jib easily. You just need to configure your pom.xml and you can get your docker image as .tar file with a mvn package command on your lifecycle. Then you copy that .tar file to your pi (you can use WinSCP as I mentioned). Then a simple $ docker load -i yourimg.tar will load your container and you are ready to run it on your server.\n*Note: If you are using watchtower to update images from docker hub, you would want to add the watchtower exclude label (see Keeping Your System Up To Date) to your docker run script.\nWhat Now? So you have set up a very basic and efficient home server with your raspberry pi. Everyone you know has almost the same functionality with cloud services or browser extensions, was it worth the time you wasted?\nYes.\n","permalink":"http://localhost:1313/posts/selfhost/","summary":"\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#table-of-contents\"\u003eTable of Contents\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#why\"\u003eWhy\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how\"\u003eHow\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#booting-up-raspberry-pi\"\u003eBooting Up Raspberry PI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#we-need-to-contain-them\"\u003eWe need to CONTAIN them!\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#projects-to-host\"\u003eProjects to Host\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#docker-management-interface\"\u003eDocker Management Interface\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#keeping-your-system-up-to-date\"\u003eKeeping Your System Up To Date\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#manage-your-passwords\"\u003eManage Your Passwords\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#block-ads-even-before-they-reach-your-home-network\"\u003eBlock Ads Even Before They Reach Your Home Network\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#your-own-projects\"\u003eYour Own Projects\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#what-now\"\u003eWhat Now?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"why\"\u003eWhy\u003c/h3\u003e\n\u003cp\u003eSo, why would you ever need to host anything at home? We live in the age of cloud computing. You can sign up with any mainstream provider and have all the functionality of the services we are going to talk about, without all the configuration hassle.\u003c/p\u003e","title":"Hosting Open Source Projects At Home"},{"content":"This is a test post. Lorem Ipsum is simply dummy text of the printing and typesetting industry.\nLorem Ipsum has been the industry\u0026rsquo;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\nIt has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\ntest\n","permalink":"http://localhost:1313/posts/test-post/","summary":"\u003ch2 id=\"this-is-a-test-post\"\u003eThis is a test post.\u003c/h2\u003e\n\u003cp\u003eLorem Ipsum is simply dummy text of the printing and typesetting industry.\u003c/p\u003e\n\u003cp\u003eLorem Ipsum has been the industry\u0026rsquo;s standard dummy text ever since the 1500s,\nwhen an unknown printer took a galley of type and scrambled it to make a type specimen book.\u003c/p\u003e\n\u003cp\u003eIt has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\u003c/p\u003e","title":"Test Post"},{"content":"Hi, I am a software developer based in Istanbul, Turkey. I like to surf the web and forget things.\n","permalink":"http://localhost:1313/about/me/","summary":"\u003cp\u003eHi, I am a software developer based in Istanbul, Turkey. I like to surf the web and forget things.\u003c/p\u003e","title":""}]